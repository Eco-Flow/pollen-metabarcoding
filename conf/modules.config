/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

//prepare reverse complement primers to remove those in PacBio, IonTorrent and Illumina read-through cutadapt steps (taken from nf-core ampliseq)
// Get the complement of a DNA sequence
// Complement table taken from http://arep.med.harvard.edu/labgc/adnan/projects/Utilities/revcomp.html
def make_complement(String seq) {
    def complements = [ A:'T', T:'A', U:'A', G:'C', C:'G', Y:'R', R:'Y', S:'S', W:'W', K:'M', M:'K', B:'V', D:'H', H:'D', V:'B', N:'N' ]
    comp = seq.toUpperCase().collect { base -> complements[ base ] ?: 'X' }.join()
    return comp
}
FW_primer_RevComp = make_complement ( "${params.FW_primer}".reverse() )
RV_primer_RevComp = make_complement ( "${params.RV_primer}".reverse() )

process {

    withName: CUTADAPT {
        ext.args = [
            "--minimum-length 1",
            "-O ${params.cutadapt_min_overlap}",
            "-e ${params.cutadapt_max_error_rate}",
            params.pacbio ? "--rc -g ${params.FW_primer}...${RV_primer_RevComp}" :
                params.iontorrent ? "--rc -g ${params.FW_primer}...${RV_primer_RevComp}" :
                params.single_end ? "-g ${params.FW_primer}" :
                "-g ${params.FW_primer} -G ${params.RV_primer}",
            params.retain_untrimmed ? '' : "--discard-untrimmed",
        ].join(' ').trim()
        ext.prefix = { "${meta.id}.trimmed" }
        publishDir = [
            path: { "${params.outdir}/cutadapt" },
            mode: params.publish_dir_mode,
            pattern: "*.log"
        ]
    }

    withName: PEAR {
    publishDir = [
            path: { "${params.outdir}/pear" },
            mode: params.publish_dir_mode,
            pattern: "*.assembled.fastq.gz"
    ]
    }

    withName: VSEARCH_FASTQ_FILTER {
        ext.args = [
            params.fastq_maxee != null ? "--fastq_maxee ${params.fastq_maxee}" : "",
            params.fastq_minlen != null ? "--fastq_minlen ${params.fastq_minlen}" : "",
            params.fastq_maxns != null ? "--fastq_maxns ${params.fastq_maxns}" : "",
            params.fasta_width != null ? "--fasta_width ${params.fasta_width}" : ""
    ].join(' ').trim()
    publishDir = [
            path: { "${params.outdir}/vsearch/fastq_filter" },
            mode: params.publish_dir_mode//,
            //pattern: "*.assembled.fastq.gz"
    ]
    }
}
