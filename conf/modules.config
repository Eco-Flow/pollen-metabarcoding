/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

//prepare reverse complement primers to remove those in PacBio, IonTorrent and Illumina read-through cutadapt steps (taken from nf-core ampliseq)
// Get the complement of a DNA sequence
// Complement table taken from http://arep.med.harvard.edu/labgc/adnan/projects/Utilities/revcomp.html
def make_complement(String seq) {
    def complements = [ A:'T', T:'A', U:'A', G:'C', C:'G', Y:'R', R:'Y', S:'S', W:'W', K:'M', M:'K', B:'V', D:'H', H:'D', V:'B', N:'N' ]
    comp = seq.toUpperCase().collect { base -> complements[ base ] ?: 'X' }.join()
    return comp
}
FW_primer_RevComp = make_complement ( "${params.FW_primer}".reverse() )
RV_primer_RevComp = make_complement ( "${params.RV_primer}".reverse() )

process {

    withName: CUTADAPT {
        cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        ext.args = [
            "--minimum-length 1",
            "-O ${params.cutadapt_min_overlap}",
            "-e ${params.cutadapt_max_error_rate}",
            params.pacbio ? "--rc -g ${params.FW_primer}...${RV_primer_RevComp}" :
                params.iontorrent ? "--rc -g ${params.FW_primer}...${RV_primer_RevComp}" :
                "-g ${params.FW_primer} -G ${RV_primer_RevComp}",
            params.retain_untrimmed ? '' : "--discard-untrimmed",
        ].join(' ').trim()
        ext.prefix = { "${meta.id}" }
        publishDir = [ [
            path: { "${params.outdir}/cutadapt/logs" },
            mode: params.publish_dir_mode,
            pattern: "*.cutadapt.log"
        ], [
            path: { "${params.outdir}/cutadapt/fastqs" },
            mode: params.publish_dir_mode,
            pattern: "*.trim.fastq.gz"
        ] ]
    }

    withName: PEAR {
        ext.args = [
            params.pear_p_value != null ? "-p ${params.pear_p_value}" : "",
            params.pear_min_overlap != null ? "-v ${params.pear_min_overlap}" : "",
            params.pear_max_len != null ? "-m ${params.pear_max_len}" : "",
            params.pear_min_len != null ? "-n ${params.pear_min_len}" : "",
            params.pear_trimmed_min_len != null ? "-t ${params.pear_trimmed_min_len}" : "",
            params.pear_quality != null ? "-q ${params.pear_quality}" : "",
            params.pear_max_uncalled != null ? "-u ${params.pear_max_uncalled}" : "",
            params.pear_stat_test != null ? "-g ${params.pear_stat_test}" : "",
            params.pear_scoring_method != null ? "-e ${pear_scoring_method}" : "",
            params.pear_phred != null ? "-b ${pear_phred}" : ""
        ].join(' ').trim()
        publishDir = [ [
            path: { "${params.outdir}/pear/assembled" },
            mode: params.publish_dir_mode,
            pattern: "*.assembled.fastq.gz"
        ], [
            path: { "${params.outdir}/pear/unassembled" },
            mode: params.publish_dir_mode,
            pattern: "*.unassembled.*.fastq.gz"
        ], [
            path: { "${params.outdir}/pear/discarded" },
            mode: params.publish_dir_mode,
            pattern: "*.discarded.fastq.gz"
        ] ]
    }

    withName: VSEARCH_FASTQ_FILTER {
        ext.args = [
            params.fastq_maxee != null ? "--fastq_maxee ${params.fastq_maxee}" : "",
            params.fastq_minlen != null ? "--fastq_minlen ${params.fastq_minlen}" : "",
            params.fastq_maxns != null ? "--fastq_maxns ${params.fastq_maxns}" : "",
            params.fasta_width != null ? "--fasta_width ${params.fasta_width}" : ""
        ].join(' ').trim()
        publishDir = [ [
            path: { "${params.outdir}/vsearch/fastq_filter/fastas" },
            mode: params.publish_dir_mode,
            pattern: "*.filtered.fasta"
        ], [
            path: { "${params.outdir}/vsearch/fastq_filter/logs" },
            mode: params.publish_dir_mode,
            pattern: "*.filtered.log"
        ] ]
    }

    withName: VSEARCH_DEREP_FULL_LENGTH {
        ext.args = [
            params.minuniquesize != null ? "--minuniquesize ${params.minuniquesize}" : "",
            params.derep_strand != null ? "--strand ${params.derep_strand}" : "",
            "--sizeout",
            params.fasta_width != null ? "--fasta_width ${params.fasta_width}" : ""
        ].join(' ').trim()
        publishDir = [ [
            path: { "${params.outdir}/vsearch/derep/fastas" },
            mode: params.publish_dir_mode,
            pattern: "*.derep.fasta"
        ], [
            path: { "${params.outdir}/vsearch/derep/clusterings" },
            mode: params.publish_dir_mode,
            pattern: "*.derep.uc"
        ], [
            path: { "${params.outdir}/vsearch/derep/logs" },
            mode: params.publish_dir_mode,
            pattern: "*.derep.log"
        ] ]
    }

    withName: VSEARCH_SINTAX {
        ext.args = [
            params.sintax_cutoff != null ? "--sintax_cutoff ${params.sintax_cutoff}" : "",
            params.sintax_strand != null ? "--strand ${params.sintax_strand}" : "",
            params.seed != null ? "--randseed ${params.seed}" : "",
        ].join(' ').trim()
        cpus = 1
        publishDir = [
            path: { "${params.outdir}/vsearch/sintax" },
            mode: params.publish_dir_mode,
            pattern: "*.tsv"
        ]
    }

    withName: R_PROCESSING {
        publishDir = [ [
            path: { "${params.outdir}/r-processing/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.classified.tsv"
        ], [
            path: { "${params.outdir}/r-processing/${meta.id}/pie_charts" },
            mode: params.publish_dir_mode,
            pattern: "*.pdf"
        ], [
            path: { "${params.outdir}/r-processing/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "summary.tsv"            
        ] ]
    }

    withName: 'CUTTING' {
        publishDir = [
            path: { "${params.outdir}/cut_tsvs" },
            mode: params.publish_dir_mode,
            pattern: 'cut.*.tsv'
        ]
    }

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}
