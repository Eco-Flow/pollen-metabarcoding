nextflow_process {

    name "Test Process R_PROCESSING"
    script "modules/local/r_processing.nf"
    process "R_PROCESSING"

    test("Should run without failures") {

        when {
            params {
                clean = false
                outdir = "results"
            }
            process {
                """
                input[0] = Channel.of( [ [ "id":"ERR2537816", "single_end": false ], file("${projectDir}/data/processing-input/ERR2537816.tsv") ] ) 
                """
            }
        }

        then {
            assert process.success
            with (process.out.classification) {
              assert size() == 1
              with(get(0)) {
                    assert get(0) == [ "id": "ERR2537816", "single_end": false ]
                    assert get(1) ==~ ".*/ERR2537816.classified.tsv"
              }
            }
            with (process.out.pie) {
              assert size() == 1
              with(get(0)) {
                    assert get(0) == [ "id": "ERR2537816", "single_end": false ]
                    with(get(1)) {
                          assert get(0) ==~ ".*/ERR2537816.family.pdf"
                          assert get(1) ==~ ".*/ERR2537816.genus.pdf"
                          assert get(2) ==~ ".*/ERR2537816.order.pdf"
                    }
              }
            }
            with (process.out.summary_table) {
              assert size() == 1
              with(get(0)) {
                    assert get(0) == [ "id": "ERR2537816", "single_end": false ]
                    assert get(1) ==~ ".*/summary.tsv"
              }
            }
            assert snapshot(
              path("${launchDir}/${params.outdir}/r-processing/ERR2537816/ERR2537816.classified.tsv"),
              path("${launchDir}/${params.outdir}/r-processing/ERR2537816/summary.tsv")
            ).match("r_processing")
        }

    }

}
